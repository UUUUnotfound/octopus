
dependencies{

  compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
  compile group: 'org.json', name: 'json', version: '20141113'

  compile project(':projects:orientdbimporter') 

  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.13'
    
  runtime group: 'ch.qos.logback', name: 'logback-core', version: '1.1.3'
  runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'

}

task downloadAndExtractOrientDB << {
     println 'Download OrientDB with wget.'

     def OCTOPUS_PATH = "$project.projectDir"
     def ARCHIVE_FILENAME = "$OCTOPUS_PATH/orientdb.tar.gz"
     def f = new File(ARCHIVE_FILENAME) 
     
     if (f.exists()){
     	println 'OrientDB already downloaded.';
	return
     }

     println 'Download OrientDB ...'
     println "wget http://orientdb.com/download.php?file=orientdb-community-2.1.5.tar.gz&os=multi -O $ARCHIVE_FILENAME".execute().text
     
     f = new File(ARCHIVE_FILENAME)
     if(!f.exists()){
	throw new RuntimeException("Error downloading OrientDB.")
     }	

     println "tar xfzv $ARCHIVE_FILENAME -C $OCTOPUS_PATH".execute().text
     
}

task copyConfigFilesToOrientDB(type:Copy){
    into "${project.projectDir}/orientdb-community-2.1.5/config"
    from "${project.projectDir}/conf/orientdb-server-config.xml"
}

task copyServerSh(type:Copy){
    into "${project.projectDir}/orientdb-community-2.1.5/bin"
    from "${project.projectDir}/conf/server.sh"
}

task copyToLib(type: Copy) {     
    into "${project.projectDir}/jars"
    from configurations.runtime 
}

task copyOctopus(type:Copy) {
   into "${project.projectDir}/jars"
   from "$buildDir/libs/octopus.jar"
}

compileJava.dependsOn downloadAndExtractOrientDB
compileJava.dependsOn copyConfigFilesToOrientDB
compileJava.dependsOn copyServerSh
compileJava.dependsOn copyToLib
compileJava.dependsOn copyOctopus

copyServerSh.dependsOn downloadAndExtractOrientDB
copyConfigFilesToOrientDB.dependsOn downloadAndExtractOrientDB



